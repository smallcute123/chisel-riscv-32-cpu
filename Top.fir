circuit Top :
  module Core :
    input clock : Clock
    input reset : Reset
    output io : { flip dmem : { flip addr : UInt<32>, rdata : UInt<32>, flip wen : UInt<1>, flip wdata : UInt<32>}, flip imem : { flip addr : UInt<32>, inst : UInt<32>}, exit : UInt<1>}

    cmem regfile : UInt<32> [32] @[Core.scala 15:22]
    reg pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 18:25]
    reg io_dmem_wdata_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 19:29]
    io.dmem.wdata <= io_dmem_wdata_REG @[Core.scala 19:19]
    reg io_dmem_wen_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Core.scala 20:27]
    io.dmem.wen <= io_dmem_wen_REG @[Core.scala 20:17]
    reg io_dmem_addr_REG : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Core.scala 21:28]
    io.dmem.addr <= io_dmem_addr_REG @[Core.scala 21:18]
    node _pc_reg_T = add(pc_reg, UInt<32>("h4")) @[Core.scala 23:23]
    node _pc_reg_T_1 = tail(_pc_reg_T, 1) @[Core.scala 23:23]
    pc_reg <= _pc_reg_T_1 @[Core.scala 23:13]
    io.imem.addr <= pc_reg @[Core.scala 25:18]
    node rs1_addr = bits(io.imem.inst, 19, 15) @[Core.scala 29:24]
    node rs2_addr = bits(io.imem.inst, 24, 20) @[Core.scala 30:24]
    node _rs1_data_T = neq(rs1_addr, UInt<32>("h0")) @[Core.scala 31:34]
    infer mport rs1_data_MPORT = regfile[rs1_addr], clock @[Core.scala 31:62]
    node rs1_data = mux(_rs1_data_T, rs1_data_MPORT, UInt<32>("h0")) @[Core.scala 31:23]
    node _rs2_data_T = neq(rs2_addr, UInt<32>("h0")) @[Core.scala 32:34]
    infer mport rs2_data_MPORT = regfile[rs2_addr], clock @[Core.scala 32:62]
    node rs2_data = mux(_rs2_data_T, rs2_data_MPORT, UInt<32>("h0")) @[Core.scala 32:23]
    node _imm_s_T = bits(io.imem.inst, 31, 25) @[Core.scala 33:25]
    node _imm_s_T_1 = bits(io.imem.inst, 11, 7) @[Core.scala 33:37]
    node imm_s = cat(_imm_s_T, _imm_s_T_1) @[Cat.scala 31:58]
    node _imm_s_sext_T = bits(imm_s, 11, 11) @[Core.scala 34:39]
    node _imm_s_sext_T_1 = bits(_imm_s_sext_T, 0, 0) @[Bitwise.scala 74:15]
    node _imm_s_sext_T_2 = mux(_imm_s_sext_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node imm_s_sext = cat(_imm_s_sext_T_2, imm_s) @[Cat.scala 31:58]
    node imm_i = bits(io.imem.inst, 31, 20) @[Core.scala 35:21]
    node _imm_i_sext_T = bits(imm_i, 11, 11) @[Core.scala 36:39]
    node _imm_i_sext_T_1 = bits(_imm_i_sext_T, 0, 0) @[Bitwise.scala 74:15]
    node _imm_i_sext_T_2 = mux(_imm_i_sext_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
    node imm_i_sext = cat(_imm_i_sext_T_2, imm_i) @[Cat.scala 31:58]
    node wb_addr = bits(io.imem.inst, 11, 7) @[Core.scala 37:23]
    node _csignals_T = and(io.imem.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csignals_T_1 = eq(UInt<14>("h2023"), _csignals_T) @[Lookup.scala 31:38]
    node _csignals_T_2 = and(io.imem.inst, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _csignals_T_3 = eq(UInt<14>("h2003"), _csignals_T_2) @[Lookup.scala 31:38]
    node _csignals_T_4 = mux(_csignals_T_3, UInt<5>("h1"), UInt<5>("h0")) @[Lookup.scala 34:39]
    node csignals_0 = mux(_csignals_T_1, UInt<5>("h1"), _csignals_T_4) @[Lookup.scala 34:39]
    node _csignals_T_5 = mux(_csignals_T_3, UInt<2>("h0"), UInt<2>("h2")) @[Lookup.scala 34:39]
    node csignals_1 = mux(_csignals_T_1, UInt<2>("h0"), _csignals_T_5) @[Lookup.scala 34:39]
    node _csignals_T_6 = mux(_csignals_T_3, UInt<2>("h2"), UInt<2>("h0")) @[Lookup.scala 34:39]
    node csignals_2 = mux(_csignals_T_1, UInt<2>("h3"), _csignals_T_6) @[Lookup.scala 34:39]
    node _csignals_T_7 = mux(_csignals_T_3, UInt<1>("h0"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node csignals_3 = mux(_csignals_T_1, UInt<1>("h1"), _csignals_T_7) @[Lookup.scala 34:39]
    node _csignals_T_8 = mux(_csignals_T_3, UInt<1>("h1"), UInt<1>("h0")) @[Lookup.scala 34:39]
    node csignals_4 = mux(_csignals_T_1, UInt<1>("h0"), _csignals_T_8) @[Lookup.scala 34:39]
    node _csignals_T_9 = mux(_csignals_T_3, UInt<3>("h1"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node csignals_5 = mux(_csignals_T_1, UInt<3>("h0"), _csignals_T_9) @[Lookup.scala 34:39]
    node _csignals_T_10 = mux(_csignals_T_3, UInt<3>("h0"), UInt<3>("h0")) @[Lookup.scala 34:39]
    node csignals_6 = mux(_csignals_T_1, UInt<3>("h0"), _csignals_T_10) @[Lookup.scala 34:39]
    node _op1_data_T = eq(csignals_1, UInt<2>("h0")) @[Core.scala 50:18]
    node op1_data = mux(_op1_data_T, rs1_data, UInt<32>("h0")) @[Mux.scala 101:16]
    node _op2_data_T = eq(csignals_2, UInt<2>("h1")) @[Core.scala 55:22]
    node _op2_data_T_1 = eq(csignals_2, UInt<2>("h3")) @[Core.scala 56:22]
    node _op2_data_T_2 = eq(csignals_2, UInt<2>("h2")) @[Core.scala 57:22]
    node _op2_data_T_3 = mux(_op2_data_T_2, imm_i_sext, UInt<32>("h0")) @[Mux.scala 101:16]
    node _op2_data_T_4 = mux(_op2_data_T_1, imm_s_sext, _op2_data_T_3) @[Mux.scala 101:16]
    node op2_data = mux(_op2_data_T, rs2_data, _op2_data_T_4) @[Mux.scala 101:16]
    node _alu_out_T = eq(csignals_0, UInt<5>("h1")) @[Core.scala 64:22]
    node _alu_out_T_1 = add(op1_data, op2_data) @[Core.scala 64:48]
    node _alu_out_T_2 = tail(_alu_out_T_1, 1) @[Core.scala 64:48]
    node alu_out = mux(_alu_out_T, _alu_out_T_2, UInt<32>("h0")) @[Mux.scala 101:16]
    node _T = eq(csignals_3, UInt<1>("h1")) @[Core.scala 69:18]
    when _T : @[Core.scala 69:28]
      io.dmem.wen <= csignals_3 @[Core.scala 70:21]
      io.dmem.addr <= alu_out @[Core.scala 71:21]
      io.dmem.wdata <= rs2_data @[Core.scala 72:23]
    node _T_1 = eq(csignals_5, UInt<3>("h1")) @[Core.scala 76:17]
    node _T_2 = eq(csignals_4, UInt<1>("h1")) @[Core.scala 76:38]
    node _T_3 = and(_T_1, _T_2) @[Core.scala 76:28]
    when _T_3 : @[Core.scala 76:48]
      io.dmem.addr <= alu_out @[Core.scala 77:22]
      infer mport MPORT = regfile[wb_addr], clock @[Core.scala 78:16]
      MPORT <= io.dmem.rdata @[Core.scala 78:26]
    node _io_exit_T = eq(io.imem.inst, UInt<32>("h5872e24d")) @[Core.scala 86:22]
    io.exit <= _io_exit_T @[Core.scala 86:13]
    node _T_4 = asUInt(reset) @[Core.scala 87:11]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[Core.scala 87:11]
    when _T_5 : @[Core.scala 87:11]
      printf(clock, UInt<1>("h1"), "pc_reg : 0x%x\n", pc_reg) : printf @[Core.scala 87:11]
    node _T_6 = asUInt(reset) @[Core.scala 90:11]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[Core.scala 90:11]
    when _T_7 : @[Core.scala 90:11]
      printf(clock, UInt<1>("h1"), "inst : 0x%x\n", io.imem.inst) : printf_1 @[Core.scala 90:11]
    node _T_8 = asUInt(reset) @[Core.scala 91:11]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[Core.scala 91:11]
    when _T_9 : @[Core.scala 91:11]
      printf(clock, UInt<1>("h1"), "--------\n") : printf_2 @[Core.scala 91:11]

  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { imem : { flip addr : UInt<32>, inst : UInt<32>}, dmem : { flip addr : UInt<32>, rdata : UInt<32>, flip wen : UInt<1>, flip wdata : UInt<32>}}

    cmem mem : UInt<8> [16384] @[Memory.scala 25:18]
    node _io_imem_inst_T = add(io.imem.addr, UInt<32>("h3")) @[Memory.scala 30:22]
    node _io_imem_inst_T_1 = tail(_io_imem_inst_T, 1) @[Memory.scala 30:22]
    node _io_imem_inst_T_2 = bits(_io_imem_inst_T_1, 13, 0) @[Memory.scala 30:8]
    infer mport io_imem_inst_MPORT = mem[_io_imem_inst_T_2], clock @[Memory.scala 30:8]
    node _io_imem_inst_T_3 = add(io.imem.addr, UInt<32>("h2")) @[Memory.scala 31:22]
    node _io_imem_inst_T_4 = tail(_io_imem_inst_T_3, 1) @[Memory.scala 31:22]
    node _io_imem_inst_T_5 = bits(_io_imem_inst_T_4, 13, 0) @[Memory.scala 31:8]
    infer mport io_imem_inst_MPORT_1 = mem[_io_imem_inst_T_5], clock @[Memory.scala 31:8]
    node _io_imem_inst_T_6 = add(io.imem.addr, UInt<32>("h1")) @[Memory.scala 32:22]
    node _io_imem_inst_T_7 = tail(_io_imem_inst_T_6, 1) @[Memory.scala 32:22]
    node _io_imem_inst_T_8 = bits(_io_imem_inst_T_7, 13, 0) @[Memory.scala 32:8]
    infer mport io_imem_inst_MPORT_2 = mem[_io_imem_inst_T_8], clock @[Memory.scala 32:8]
    node _io_imem_inst_T_9 = bits(io.imem.addr, 13, 0) @[Memory.scala 33:8]
    infer mport io_imem_inst_MPORT_3 = mem[_io_imem_inst_T_9], clock @[Memory.scala 33:8]
    node io_imem_inst_lo = cat(io_imem_inst_MPORT_2, io_imem_inst_MPORT_3) @[Cat.scala 31:58]
    node io_imem_inst_hi = cat(io_imem_inst_MPORT, io_imem_inst_MPORT_1) @[Cat.scala 31:58]
    node _io_imem_inst_T_10 = cat(io_imem_inst_hi, io_imem_inst_lo) @[Cat.scala 31:58]
    io.imem.inst <= _io_imem_inst_T_10 @[Memory.scala 29:18]
    node _io_dmem_rdata_T = add(io.dmem.addr, UInt<32>("h3")) @[Memory.scala 36:22]
    node _io_dmem_rdata_T_1 = tail(_io_dmem_rdata_T, 1) @[Memory.scala 36:22]
    node _io_dmem_rdata_T_2 = bits(_io_dmem_rdata_T_1, 13, 0) @[Memory.scala 36:8]
    infer mport io_dmem_rdata_MPORT = mem[_io_dmem_rdata_T_2], clock @[Memory.scala 36:8]
    node _io_dmem_rdata_T_3 = add(io.dmem.addr, UInt<32>("h2")) @[Memory.scala 37:22]
    node _io_dmem_rdata_T_4 = tail(_io_dmem_rdata_T_3, 1) @[Memory.scala 37:22]
    node _io_dmem_rdata_T_5 = bits(_io_dmem_rdata_T_4, 13, 0) @[Memory.scala 37:8]
    infer mport io_dmem_rdata_MPORT_1 = mem[_io_dmem_rdata_T_5], clock @[Memory.scala 37:8]
    node _io_dmem_rdata_T_6 = add(io.dmem.addr, UInt<32>("h1")) @[Memory.scala 38:22]
    node _io_dmem_rdata_T_7 = tail(_io_dmem_rdata_T_6, 1) @[Memory.scala 38:22]
    node _io_dmem_rdata_T_8 = bits(_io_dmem_rdata_T_7, 13, 0) @[Memory.scala 38:8]
    infer mport io_dmem_rdata_MPORT_2 = mem[_io_dmem_rdata_T_8], clock @[Memory.scala 38:8]
    node _io_dmem_rdata_T_9 = bits(io.dmem.addr, 13, 0) @[Memory.scala 39:8]
    infer mport io_dmem_rdata_MPORT_3 = mem[_io_dmem_rdata_T_9], clock @[Memory.scala 39:8]
    node io_dmem_rdata_lo = cat(io_dmem_rdata_MPORT_2, io_dmem_rdata_MPORT_3) @[Cat.scala 31:58]
    node io_dmem_rdata_hi = cat(io_dmem_rdata_MPORT, io_dmem_rdata_MPORT_1) @[Cat.scala 31:58]
    node _io_dmem_rdata_T_10 = cat(io_dmem_rdata_hi, io_dmem_rdata_lo) @[Cat.scala 31:58]
    io.dmem.rdata <= _io_dmem_rdata_T_10 @[Memory.scala 35:18]
    when io.dmem.wen : @[Memory.scala 42:21]
      node _T = bits(io.dmem.addr, 13, 0) @[Memory.scala 43:8]
      infer mport MPORT = mem[_T], clock @[Memory.scala 43:8]
      node _T_1 = bits(io.dmem.wdata, 7, 0) @[Memory.scala 43:39]
      MPORT <= _T_1 @[Memory.scala 43:23]
      node _T_2 = add(io.dmem.addr, UInt<1>("h1")) @[Memory.scala 44:21]
      node _T_3 = tail(_T_2, 1) @[Memory.scala 44:21]
      node _T_4 = bits(_T_3, 13, 0) @[Memory.scala 44:8]
      infer mport MPORT_1 = mem[_T_4], clock @[Memory.scala 44:8]
      node _T_5 = bits(io.dmem.wdata, 15, 8) @[Memory.scala 44:43]
      MPORT_1 <= _T_5 @[Memory.scala 44:27]
      node _T_6 = add(io.dmem.addr, UInt<2>("h2")) @[Memory.scala 45:21]
      node _T_7 = tail(_T_6, 1) @[Memory.scala 45:21]
      node _T_8 = bits(_T_7, 13, 0) @[Memory.scala 45:8]
      infer mport MPORT_2 = mem[_T_8], clock @[Memory.scala 45:8]
      node _T_9 = bits(io.dmem.wdata, 23, 16) @[Memory.scala 45:43]
      MPORT_2 <= _T_9 @[Memory.scala 45:27]
      node _T_10 = add(io.dmem.addr, UInt<2>("h3")) @[Memory.scala 46:21]
      node _T_11 = tail(_T_10, 1) @[Memory.scala 46:21]
      node _T_12 = bits(_T_11, 13, 0) @[Memory.scala 46:8]
      infer mport MPORT_3 = mem[_T_12], clock @[Memory.scala 46:8]
      node _T_13 = bits(io.dmem.wdata, 31, 24) @[Memory.scala 46:43]
      MPORT_3 <= _T_13 @[Memory.scala 46:27]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { exit : UInt<1>}

    inst core of Core @[Top.scala 12:20]
    core.clock <= clock
    core.reset <= reset
    inst memory of Memory @[Top.scala 13:22]
    memory.clock <= clock
    memory.reset <= reset
    core.io.imem.inst <= memory.io.imem.inst @[Top.scala 14:16]
    memory.io.imem.addr <= core.io.imem.addr @[Top.scala 14:16]
    memory.io.dmem.wdata <= core.io.dmem.wdata @[Top.scala 15:16]
    memory.io.dmem.wen <= core.io.dmem.wen @[Top.scala 15:16]
    core.io.dmem.rdata <= memory.io.dmem.rdata @[Top.scala 15:16]
    memory.io.dmem.addr <= core.io.dmem.addr @[Top.scala 15:16]
    io.exit <= core.io.exit @[Top.scala 16:11]

